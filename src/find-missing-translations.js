import axios from "axios";
import "../config/config.js";

const axiosInstance = axios.create({
  baseURL: `${process.env.STRAPI_URL}/graphql`,
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${process.env.STRAPI_API_TOKEN}`,
  },
});

async function getAllProducts(locale) {
  const query = `
    query GetAllProducts($locale: I18NLocaleCode!, $pagination: PaginationArg) {
      products(locale: $locale, pagination: $pagination) {
        data {
          id
          attributes {
            part_number
            title
            localizations {
              data {
                id
                attributes {
                  locale
                }
              }
            }
          }
        }
        meta {
          pagination {
            total
            page
            pageSize
            pageCount
          }
        }
      }
    }
  `;

  const pageSize = 100;
  let page = 1;
  let allProducts = [];
  let hasMorePages = true;

  while (hasMorePages) {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ ${locale} –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}...`);

    const variables = {
      locale,
      pagination: {
        page,
        pageSize,
      },
    };

    try {
      const response = await axiosInstance.post("", { query, variables });
      const products = response.data.data.products.data;
      allProducts = [...allProducts, ...products];

      const { total, pageCount } = response.data.data.products.meta.pagination;

      console.log(
        `–ü–æ–ª—É—á–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –í—Å–µ–≥–æ: ${allProducts.length}/${total}`
      );

      if (page >= pageCount) {
        hasMorePages = false;
      } else {
        page++;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:`, error);
      hasMorePages = false;
    }
  }

  return allProducts;
}

async function findMissingTranslations() {
  try {
    console.log("=== –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ===".blue.bold);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    console.log("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...".cyan);
    const ukrainianProducts = await getAllProducts("uk");
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—É—Å—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä—É—Å—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...".cyan);
    const russianProducts = await getAllProducts("ru");

    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`.yellow.bold);
    console.log(`üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ${ukrainianProducts.length}`.blue);
    console.log(`üá∑üá∫ –†—É—Å—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã: ${russianProducts.length}`.red);

    // –°–æ–∑–¥–∞–µ–º Set —Ä—É—Å—Å–∫–∏—Ö part_number –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const russianPartNumbers = new Set(
      russianProducts.map(p => p.attributes.part_number)
    );

    // –ù–∞—Ö–æ–¥–∏–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const missingTranslations = [];
    const hasRussianButNotLinked = [];

    for (const ukProduct of ukrainianProducts) {
      const partNumber = ukProduct.attributes.part_number;
      const hasRussianLocalization = ukProduct.attributes.localizations.data.some(
        loc => loc.attributes.locale === "ru"
      );
      const existsAsRussianProduct = russianPartNumbers.has(partNumber);

      if (!hasRussianLocalization && !existsAsRussianProduct) {
        // –°–æ–≤—Å–µ–º –Ω–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        missingTranslations.push({
          id: ukProduct.id,
          part_number: partNumber,
          title: ukProduct.attributes.title,
          type: 'completely_missing'
        });
      } else if (!hasRussianLocalization && existsAsRussianProduct) {
        // –†—É—Å—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω –∫–∞–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        hasRussianButNotLinked.push({
          id: ukProduct.id,
          part_number: partNumber,
          title: ukProduct.attributes.title,
          type: 'broken_localization'
        });
      }
    }

    console.log(`\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`.yellow.bold);
    console.log(`‚ùå –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã: ${missingTranslations.length}`.red.bold);
    console.log(`üîó –ü—Ä–æ–¥—É–∫—Ç—ã —Å –ø–æ–ª–æ–º–∞–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏: ${hasRussianButNotLinked.length}`.orange);

    if (missingTranslations.length > 0) {
      console.log(`\n‚ùå –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ë–ï–ó –ø–µ—Ä–µ–≤–æ–¥–æ–≤:`.red.bold);
      missingTranslations.slice(0, 10).forEach((product, index) => {
        console.log(`${index + 1}. ID: ${product.id}, Part: ${product.part_number}, Title: "${product.title}"`);
      });
    }

    if (hasRussianButNotLinked.length > 0) {
      console.log(`\nüîó –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ü–û–õ–û–ú–ê–ù–ù–´–ú–ò —Å–≤—è–∑—è–º–∏:`.orange);
      hasRussianButNotLinked.slice(0, 10).forEach((product, index) => {
        console.log(`${index + 1}. ID: ${product.id}, Part: ${product.part_number}, Title: "${product.title}"`);
      });
    }

    const totalMissing = missingTranslations.length + hasRussianButNotLinked.length;
    console.log(`\nüìä –û–±—â–∏–π –∏—Ç–æ–≥: ${totalMissing} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ø–µ—Ä–µ–≤–æ–¥–µ/—Å–≤—è–∑—ã–≤–∞–Ω–∏–∏`.yellow.bold);

    return {
      total: totalMissing,
      completelyMissing: missingTranslations.length,
      brokenLocalizations: hasRussianButNotLinked.length,
      missingList: missingTranslations,
      brokenList: hasRussianButNotLinked
    };

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
findMissingTranslations();
